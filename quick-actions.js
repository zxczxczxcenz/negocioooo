// ========== –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø ==========

class QuickActionsManager {
    constructor() {
        this.botData = null;
        this.init();
    }

    init() {
        this.getBotData();
        this.initEventListeners();
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    getBotData() {
        try {
            let botUsername = null;
            let botName = 'Gaming Bot';
            
            if (window.Telegram && window.Telegram.WebApp) {
                const tg = window.Telegram.WebApp;
                
                // –ú–µ—Ç–æ–¥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–∑ initData
                if (tg.initDataUnsafe) {
                    // –ò–∑ user –¥–∞–Ω–Ω—ã—Ö
                    if (tg.initDataUnsafe.user) {
                        console.log('User data:', tg.initDataUnsafe.user);
                    }
                    
                    // –ò–∑ start_param
                    if (tg.initDataUnsafe.start_param) {
                        console.log('Start param:', tg.initDataUnsafe.start_param);
                    }
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å bot username –∏–∑ chat –¥–∞–Ω–Ω—ã—Ö
                    if (tg.initDataUnsafe.chat) {
                        console.log('Chat data:', tg.initDataUnsafe.chat);
                    }
                }
                
                // –ú–µ—Ç–æ–¥ 2: –ò–∑ query string
                const urlParams = new URLSearchParams(window.location.search);
                botUsername = urlParams.get('bot') || urlParams.get('username');
                
                // –ú–µ—Ç–æ–¥ 3: –ò–∑ WebApp –¥–∞–Ω–Ω—ã—Ö
                if (tg.initData) {
                    try {
                        const initDataString = decodeURIComponent(tg.initData);
                        const botMatch = initDataString.match(/bot[^&]*[@\w]+/);
                        if (botMatch) {
                            console.log('Bot from initData:', botMatch[0]);
                        }
                    } catch (e) {
                        console.log('Could not parse initData');
                    }
                }
                
                // –ú–µ—Ç–æ–¥ 4: –ò–∑ document referrer
                if (!botUsername) {
                    botUsername = this.extractBotFromURL();
                }
                
                // –ú–µ—Ç–æ–¥ 5: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ window.location
                if (!botUsername && window.location.hash) {
                    const hashMatch = window.location.hash.match(/@(\w+)/);
                    if (hashMatch) {
                        botUsername = hashMatch[1];
                    }
                }
                
                console.log('Detected bot username:', botUsername);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            this.botData = {
                username: botUsername || 'gaming_bot',
                url: botUsername ? `https://t.me/${botUsername}` : window.location.href,
                name: botName
            };
            
            console.log('Final bot data:', this.botData);
            
        } catch (error) {
            console.error('Error getting bot data:', error);
            this.botData = {
                username: 'gaming_bot',
                url: window.location.href,
                name: 'Gaming Bot'
            };
        }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º bot username –∏–∑ URL
    extractBotFromURL() {
        try {
            // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            const sources = [
                document.referrer,
                window.location.href,
                window.location.origin,
                localStorage.getItem('telegram_bot_url'),
                sessionStorage.getItem('telegram_bot_url')
            ].filter(Boolean);
            
            for (const url of sources) {
                // –ü–∞—Ç—Ç–µ—Ä–Ω 1: t.me/botname
                let match = url.match(/t\.me\/([^\/\?\#\s]+)/);
                if (match && match[1] && !match[1].includes('share')) {
                    console.log(`Found bot from ${url}: ${match[1]}`);
                    return match[1];
                }
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 2: telegram.me/botname
                match = url.match(/telegram\.me\/([^\/\?\#\s]+)/);
                if (match && match[1]) {
                    console.log(`Found bot from telegram.me: ${match[1]}`);
                    return match[1];
                }
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 3: @botname –≤ URL
                match = url.match(/@([a-zA-Z0-9_]+)/);
                if (match && match[1]) {
                    console.log(`Found bot with @: ${match[1]}`);
                    return match[1];
                }
            }
            
            return null;
        } catch (e) {
            console.error('Error extracting bot from URL:', e);
            return null;
        }
    }

    initEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
        const shareBotBtn = document.getElementById('shareBotBtn');
        if (shareBotBtn) {
            shareBotBtn.addEventListener('click', () => {
                this.shareBot();
                this.addHapticFeedback();
            });
        }
    }



    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram
    shareBot() {
        try {
            const shareText = "Signal bot with more games!";
            const botUrl = this.botData ? this.botData.url : window.location.href;
            const botUsername = this.botData ? this.botData.username : 'gaming_bot';
            
            console.log('Sharing bot:', this.botData);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API
            if (window.Telegram && window.Telegram.WebApp) {
                const tg = window.Telegram.WebApp;
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                tg.openTelegramLink(`https://t.me/share/url?url=https://t.me/VIpMinesBotPro_bot&text=${encodeURIComponent(shareText)}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification(`Sharing @${botUsername}... üì§`, "success");
            } else {
                // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
                const shareData = {
                    title: 'Gaming Bot',
                    text: shareText,
                    url: botUrl
                };

                if (navigator.share) {
                    navigator.share(shareData);
                } else {
                    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    navigator.clipboard.writeText(botUrl).then(() => {
                        this.showNotification("Link copied to clipboard! üìã", "success");
                    });
                }
            }
        } catch (error) {
            console.error('Share error:', error);
            this.showNotification("Share failed. Try again! ‚ùå", "error");
        }
    }



    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    addHapticFeedback() {
        // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (navigator.vibrate) {
            navigator.vibrate(30);
        }
        
        // Telegram WebApp haptic feedback
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--glass-bg);
            color: var(--text-primary);
            padding: 12px 20px;
            border-radius: 10px;
            border: 1px solid var(--glass-border);
            backdrop-filter: var(--backdrop-blur);
            z-index: 3000;
            font-size: 14px;
            box-shadow: 0 4px 20px var(--shadow-primary);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let quickActionsManager;

document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        quickActionsManager = new QuickActionsManager();
    }, 200);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.QuickActionsManager = QuickActionsManager; 